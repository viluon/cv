name: Docker container
on:
  push:
    paths:
      - .github/workflows/Dockerfile
      - .github/workflows/build.sh
      - .github/workflows/slim-container.yml
  workflow_dispatch:
  workflow_run:
    workflows: [LaTeX]
    types: [completed]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  slim:
    runs-on: ubuntu-latest
    # run this job manually or when LaTeX workflow fails
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'failure' }}
    steps:
    - name: login to ${{ env.REGISTRY }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.repository_owner }}
        password: ${{ github.token }}

    - name: build a docker container
      uses: docker/build-push-action@v6
      with:
        file: .github/workflows/Dockerfile
        push: false
        tags: ${{ env.REGISTRY }}/${{ github.repository }}:latest

    - name: checkout
      uses: actions/checkout@v4

    - name: slim it
      id: slim
      env:
        DSLIM_CONTINUE_AFTER: exec
        DSLIM_HTTP_PROBE: false
        DSLIM_INCLUDE_CERT_ALL: false
        DSLIM_INCLUDE_SHELL: true
        DSLIM_PLOG: true
        DSLIM_RC_ENTRYPOINT: /app/.github/workflows/build.sh
        DSLIM_EXCLUDE_PATTERN: /usr/lib/*-linux-gnu/libLLVM*.so*
        DSLIM_RC_EXE: |
          apt-get update && \
          apt-get -y install coreutils procps && \
          export pid=$(pgrep --full 'bash.*workflows/build.sh$') && \
          ps aux && \
          echo "waiting for $pid to exit" && \
          while kill -0 $pid 2> /dev/null; do sleep 1; done && \
          echo "finished"
        DSLIM_SHOW_BLOGS: true
        DSLIM_SHOW_CLOGS: true
      run: |
        curl -L -o ds.tar.gz https://github.com/slimtoolkit/slim/releases/download/1.40.11/dist_linux.tar.gz
        tar -xvf ds.tar.gz
        ./dist_linux/slim \
          --verbose \
          --debug \
          --report slim.report.json \
          build \
          --target ${{ env.REGISTRY }}/${{ github.repository }}:latest \
          --tag slim

    - name: dump the slim report
      run: cat slim.report.json

    - name: push to the registry
      run: docker image push "${{ env.REGISTRY }}/${{ github.repository }}" --all-tags
